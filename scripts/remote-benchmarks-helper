#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

required_vars=(
  "SSH_USER"
  "SSH_HOST_1"
  "SSH_HOST_2")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var}" ]]
  then
    echo "env var $var must be set"
    required_var_missing=true
  fi
done

if [ -n "$required_var_missing" ];
then
  exit 1
fi

if [ -z "$RUNS" ];
then
  RUNS=5
fi

if [ -z "$ITERATIONS" ];
then
  ITERATIONS=10
fi

if [ -z "$NUMBER_OF_MESSAGES" ];
then
  NUMBER_OF_MESSAGES=(5000 25000 100000)
fi

if [ -z "$BURST_SIZE" ];
then
  BURST_SIZE=(1 10)
fi

if [ -z "$MESSAGE_LENGTH" ];
then
  MESSAGE_LENGTH=(32 224 1378)
fi

function pin_all_threads()
{
  echo "taskset -p -a -c $2 $1"
}

function pin_thread()
{
  local pid=$1
  local thread_name=$2
  local core=$3
  local tid="tid=\$(ps Ho tid,comm -p $pid | grep \"$thread_name\" | awk '{print \$1}')"
  echo "$tid; while [ -z \"\$tid\" ]; do $tid; sleep 0.1; done; taskset -p -c $core \$tid"
}

function background_command()
{
  local executable=$1
  local other_cores=$2

  local command=""
  command+="$executable& script_pid=\$!"
  command+="; pid=\$script_pid; while [ \"\$pid\" ]; do command_pid=\$pid; pid=\$(ps -o pid= --ppid \$pid | sed 's/^ *//;s/ *$//'); done"

  command+="; $(pin_all_threads \$command_pid "$other_cores")"

  shift
  shift
  while [[ $# -gt 0 ]]
  do
    local thread_name=$1
    local core=$2
    command+="; $(pin_thread \$command_pid "$thread_name" "$core")"
    shift
    shift
  done

  echo $command
}

function run_benchmarks()
{
  local client_command="$1"
  local server_command="$2"
  local config_file="$3"
  local config_options=("${@:4}")

  for messages in "${NUMBER_OF_MESSAGES[@]}"
  do
    for burst in "${BURST_SIZE[@]}"
    do
      for length in "${MESSAGE_LENGTH[@]}"
      do
        for (( i=1; i<=RUNS; i++ ))
        do
          echo -e '\n#######################'
          echo 'Benchmark run #'$i' ...'
          echo '#######################'

          config_options+=("uk.co.real_logic.benchmarks.remote.iterations=${ITERATIONS}")
          config_options+=("uk.co.real_logic.benchmarks.remote.messages=${messages# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.batchSize=${burst# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.messageLength=${length# }")

          local jvm_opts="rm -f $config_file"
          for opt in "${config_options[@]}";
          do
            jvm_opts+=" && echo '$opt' >> $config_file"
          done

          ssh $SSH_USER@$SSH_HOST_2 "$jvm_opts && $server_command" &
          ssh $SSH_USER@$SSH_HOST_1 "$jvm_opts && $client_command"
          wait # wait for the server command to complete
        done
      done
    done
  done
}
