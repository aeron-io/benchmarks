#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

required_vars=(
  "SSH_USER"
  "SSH_KEY_FILE"
  "SSH_CLIENT_NODE"
  "SSH_SERVER_NODE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]];
then
  exit 1
fi

if [[ ! -v SSH_CONNECTION_ATTEMPTS ]];
then
  SSH_CONNECTION_ATTEMPTS=10
fi

if [[ ! -v SSH_CONNECT_TIMEOUT ]];
then
  SSH_CONNECT_TIMEOUT=30
fi

if [[ ! -v SSH_SERVER_ALIVE_INTERVAL ]];
then
  SSH_SERVER_ALIVE_INTERVAL=600
fi

if [[ ! -v RUNS ]];
then
  RUNS=3
fi

if [[ ! -v ITERATIONS ]];
then
  ITERATIONS=10
fi

if [[ ! -v WARMUP_ITERATIONS ]];
then
  WARMUP_ITERATIONS=5
fi

if [[ ! -v MESSAGE_RATE ]];
then
  MESSAGE_RATE=(100000)
fi

if [[ ! -v BURST_SIZE ]];
then
  BURST_SIZE=(1 10)
fi

if [[ ! -v MESSAGE_LENGTH ]];
then
  MESSAGE_LENGTH=(32 224 1376)
fi

if [[ ! -v CONNECTION_TIMEOUT ]];
then
  CONNECTION_TIMEOUT="60s"
fi

function run_benchmarks()
{
  local client_command="${1}"
  local server_start_command="${2}"
  local server_stop_command="${3}"
  local config=("${@:4}")

  for messageRate in "${MESSAGE_RATE[@]}"
  do
    for burstSize in "${BURST_SIZE[@]}"
    do
      for messageLength in "${MESSAGE_LENGTH[@]}"
      do
        for (( i=1; i<=RUNS; i++ ))
        do
          echo -e '\n### Benchmark run #'${i}' ...\n'

          local config_options=("${config[@]}")
          config_options+=("uk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${CONNECTION_TIMEOUT}")
          config_options+=("uk.co.real_logic.benchmarks.remote.iterations=${ITERATIONS}")
          config_options+=("uk.co.real_logic.benchmarks.remote.warmup.iterations=${WARMUP_ITERATIONS}")
          config_options+=("uk.co.real_logic.benchmarks.remote.message.rate=${messageRate# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.batch.size=${burstSize# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.message.length=${messageLength# }")

          local jvm_opts="export JVM_OPTS=\""
          for opt in "${config_options[@]}";
          do
            jvm_opts+="-D${opt} "
          done
          jvm_opts="${jvm_opts%?}\""

          echo -e "\nStarting server..."
          execute_remote_command "${SSH_SERVER_NODE}" "${jvm_opts} && (${server_start_command} &) > /tmp/benchmarks-server.log 2>&1 && exit"

          echo -e "\nStarting client..."
          execute_remote_command "${SSH_CLIENT_NODE}" "${jvm_opts} && ${client_command} && exit"

          echo -e "\nStopping server..."
          execute_remote_command "${SSH_SERVER_NODE}" "${server_stop_command} && exit"
        done
      done
    done
  done
}

function download_results()
{
  local archive="/home/${SSH_USER}/${1}"
  local results_dir="${2}"
  local dest_dir="${3}"

  execute_remote_command "${SSH_CLIENT_NODE}" "rm -f \"${archive}\"; cd \"${results_dir}\" && zip -r \"${archive}\" . && exit"
  scp -i ${SSH_KEY_FILE} \
   -o ConnectionAttempts=${SSH_CONNECTION_ATTEMPTS} \
   -o ConnectTimeout=${SSH_CONNECT_TIMEOUT} \
   -o ServerAliveInterval=${SSH_SERVER_ALIVE_INTERVAL} \
   "${SSH_USER}"@"${SSH_CLIENT_NODE}":"${archive}" "${dest_dir}"
}

function await_process_start()
{
  local pid=${1}
  echo "pid=${pid}; while [ -z \"\${pid}\" ]; do sleep 0.5; pid=${pid}; done; echo \"pid=\${pid}\""
}

function find_java_process()
{
  local class_name=${1}
  echo "\$(pgrep -l -f '${class_name}' | awk '/java/{print \$1}')"
}

function await_java_process_start()
{
  local class_name=${1}
  await_process_start "$(find_java_process "${class_name}")"
}

function kill_java_process()
{
  local class_name=${1}
  echo "kill -9 $(find_java_process "${class_name}")"
}

function execute_remote_command()
{
  local server=$1
  local command=$2
  ssh -i "${SSH_KEY_FILE}" \
   -o ConnectionAttempts=${SSH_CONNECTION_ATTEMPTS} \
   -o ConnectTimeout=${SSH_CONNECT_TIMEOUT} \
   -o ServerAliveInterval=${SSH_SERVER_ALIVE_INTERVAL} \
   "${SSH_USER}"@"${server}" \
   "${command}"
}