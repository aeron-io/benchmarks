Overview
--------

This directory provides scripts to benchmark Aeron using the `uk.co.real_logic.benchmarks.rtt.LoadTestRig`.

All benchmarks require two nodes: "client" and "server", where "client" is the
`uk.co.real_logic.benchmarks.rtt.LoadTestRig` that uses one of the `uk.co.real_logic.benchmarks.rtt.MessageTransceiver`
implementation under the hood and the "server" is the remote node that pipes messages through.
NOTE: It is advised to have "client" and "server" run on different machines.


Test scenarios
--------------

Four different test scenarios are covered:
1. Echo benchmark (aka ping-pong)

Start the scripts in the following order: `echo-server` --> `echo-client`.

2. Live replay from local archive
The client publishes messages over IPC to local publication and has a recording running using local archive. The server
replays messages over UDP from that archive and pipes them back to the client.

Start the scripts in the following order: `live-replay-local-archive-client` --> `live-replay-local-archive-server`.

3. Live replay from remote archive
The client publishes messages to the server using publication over UDP. The server pipes those message into a local IPC
publication which records them into an archive. Finally the client subscribes to the replay from that archive over UDP.

Start the scripts in the following order: `live-replay-remote-archive-server` --> `live-replay-remote-archive-client`.

4. Live recording, i.e. client runs records a publication into local archive
The client publishes messages over UDP to the server. It also has a recording running on that publication using local
archive. The server simply pipes message back. Finally the client performs a controlled poll on the subscription from
the server limited by the "recording progress" which it gets via the recording events.

The biggest difference between scenario 2 and this scenario is that there is no replay of recorded message and hence no
reading from the disc of the saved data but still allowing to consume only those messages that were successfully
persisted.

Start the scripts in the following order: `echo-server` --> `live-recording-client`.


Helper scripts:
--------------

Besides the scripts to run actual client and server for each case there are several helper scripts:
- `media-driver` - starts a Java `MediaDriver` as a separate process.

- `c-media-driver` - starts a C `MediaDriver` as a separate process.
By default it will run locally built Aeron C driver. However it is possible to specify an executable via the
`AERON_MD` environment variable.

For example:
```
AERON_MD=my-aeron-driver ./c-media-driver
```

- `run-with-embedded-media-driver` - runs another scripts ensuring that it will be executed with the embedded
`MediaDriver`.

For example:
```
./run-with-embedded-media-driver ./echo-client
```
will run `echo-client` script with embedded `MediaDriver`.