#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "$DIR/remote-benchmarks-helper"

required_vars=(
  "BENCHMARKS_PATH"
  "CLIENT_JAVA_HOME"
  "CLIENT_DRIVER_CPU_CORE_1"
  "CLIENT_DRIVER_CPU_CORE_2"
  "CLIENT_DRIVER_CPU_CORE_3"
  "CLIENT_DRIVER_OTHER_CPU_CORES"
  "CLIENT_CPU_CORES"
  "SERVER_JAVA_HOME"
  "SERVER_DRIVER_CPU_CORE_1"
  "SERVER_DRIVER_CPU_CORE_2"
  "SERVER_DRIVER_CPU_CORE_3"
  "SERVER_DRIVER_OTHER_CPU_CORES"
  "SERVER_CPU_CORES"
  "AERON_DESTINATION_IP"
  "AERON_DESTINATION_INTERFACE"
  "AERON_SOURCE_IP"
  "AERON_SOURCE_INTERFACE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var}" ]]
  then
    echo "env var $var must be set"
    required_var_missing=true
  fi
done

if [ -n "$required_var_missing" ];
then
  exit 1
fi

enable_onload=1
enable_ef_vi=1
enable_ats=1
enable_c_driver=1
active_publications=(1 2 5 10)

while [[ $# -gt 0 ]]
do
  case "$1" in
    --no-onload)
      enable_onload=0
      shift
      ;;
    --no-ef_vi)
      enable_ef_vi=0
      shift
      ;;
    --no-ats)
      enable_ats=0
      shift
      ;;
    --no-c-driver)
      enable_c_driver=0
      shift
      ;;
    --active-publications)
      IFS=',';
      read -ra active_publications <<< "$2"
      unset IFS;
      shift
      shift
      ;;
    -h|--help)
      echo "$0 [--no-onload] [--no-ef_vi] [--no-ats] [--no-c-driver] [--active-publications \"\$active-publications-csv\"]"
      exit
      ;;
    *)
      echo "Invalid parameter. Use --help to get a list of supported parameters."
      exit 1
      ;;
  esac
done

function build_drivers()
{
  local commands=()

  # Java driver
  commands+=("$(start_media_driver "$BENCHMARKS_PATH/scripts/aeron/media-driver" "$1" "$2" "$3" "$4")")

  if [ "$enable_onload" -eq 1 ]
  then
    # Java driver with Onload
    commands+=("$(start_media_driver \
      "onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/media-driver" "$1" "$2" "$3" "$4")")
  fi

  if [ "$enable_c_driver" -eq 1 ]
  then
    # C driver
    commands+=("$(start_media_driver "$BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

    if [ "$enable_onload" -eq 1 ]
    then
      # C driver with Onload
      commands+=("$(start_media_driver \
        "onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")
    fi

    if [ "$enable_ef_vi" -eq 1 ]
    then
      # C driver with ef_vi
      commands+=("$(start_media_driver \
        "AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_ef_vi.so\" \
        $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")
    fi

    if [ "$enable_ats" -eq 1 ]
    then
      # C driver with ATS
      commands+=("$(start_media_driver \
        "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\" \
        $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

      if [ "$enable_onload" -eq 1 ]
      then
        # C driver with ATS and Onload
        commands+=("$(start_media_driver \
          "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
          AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
          AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\" \
          onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")
      fi

      if [ "$enable_ef_vi" -eq 1 ]
      then
        # C driver with ATS and ef_vi
        commands+=("$(start_media_driver \
          "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
          AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
          AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\",\"$BENCHMARKS_PATH/scripts/aeron/libaeron_ef_vi.so\" \
          AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
          $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")
      fi
    fi
  fi

  local IFS=$'\n'
  echo "${commands[*]}"
}

IFS=$'\n'
client_drivers=($(build_drivers "$CLIENT_DRIVER_OTHER_CPU_CORES" "$CLIENT_DRIVER_CPU_CORE_1" "$CLIENT_DRIVER_CPU_CORE_2" "$CLIENT_DRIVER_CPU_CORE_3"))
server_drivers=($(build_drivers "$SERVER_DRIVER_OTHER_CPU_CORES" "$SERVER_DRIVER_CPU_CORE_1" "$SERVER_DRIVER_CPU_CORE_2" "$SERVER_DRIVER_CPU_CORE_3"))
unset IFS

scenarios=("java")

if [ "$enable_onload" -eq 1 ]
then
  scenarios+=("java-onload")
fi

if [ "$enable_c_driver" -eq 1 ]
then
  scenarios+=("c")

  if [ "$enable_onload" -eq 1 ]
  then
    scenarios+=("c-onload")
  fi

  if [ "$enable_ef_vi" -eq 1 ]
  then
    scenarios+=("c-ef_vi")
  fi

  if [ "$enable_ats" -eq 1 ]
  then
    scenarios+=("c-ats")

    if [ "$enable_onload" -eq 1 ]
    then
      scenarios+=("c-ats-onload")
    fi

    if [ "$enable_ef_vi" -eq 1 ]
    then
      scenarios+=("c-ats-ef_vi")
    fi
  fi
fi

for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"
  client_driver="${client_drivers[index]}"
  server_driver="${server_drivers[index]}"

  for active in "${active_publications[@]}"
  do
    for passive in 0 $active
    do
      test="echo-$scenario-active-$active-passive-$passive"
      echo -e "\n Testing scenario: '$test'\n"

      destination_channels=""
      destination_streams=""
      source_channels=""
      source_streams=""
      passive_channels=""
      passive_streams=""

      for (( i=0; i<active; i++ ))
      do
        dest_port=$((13000 + i))
        dest_stream=$((1000000 + i))
        src_port=$((13100 + i))
        src_stream=$((2000000 + i))

        destination_channels+="aeron:udp?endpoint=$AERON_DESTINATION_IP:$dest_port|interface=$AERON_DESTINATION_INTERFACE,"
        destination_streams+="$dest_stream,"

        source_channels+="aeron:udp?endpoint=$AERON_SOURCE_IP:$src_port|interface=$AERON_SOURCE_INTERFACE,"
        source_streams+="$src_stream,"

        if [ "$passive" -ne 0 ]
        then
          passive_port=$((13200 + i))
          passive_stream=$((3000000 + i))
          passive_channels+="aeron:udp?endpoint=$AERON_DESTINATION_IP:$passive_port|interface=$AERON_DESTINATION_INTERFACE,"
          passive_streams+="$passive_stream,"
        fi
      done

      run_benchmarks \
        "export JAVA_HOME=\"$CLIENT_JAVA_HOME\" && $client_driver && taskset -c $CLIENT_CPU_CORES $BENCHMARKS_PATH/scripts/aeron/echo-client && kill \$driver_pid; wait" \
        "export JAVA_HOME=\"$SERVER_JAVA_HOME\" && $server_driver && taskset -c $SERVER_CPU_CORES $BENCHMARKS_PATH/scripts/aeron/echo-server" \
        "kill -9 $(find_java_process_by_class_name "uk.co.real_logic.benchmarks.aeron.remote.EchoNode"); $(stop_media_driver)" \
        "$BENCHMARKS_PATH/scripts/aeron/benchmark.properties" \
        "uk.co.real_logic.benchmarks.remote.outputFileNamePrefix=$test" \
        "uk.co.real_logic.benchmarks.remote.outputDirectory=$BENCHMARKS_PATH/scripts/results" \
        "uk.co.real_logic.benchmarks.aeron.remote.destination.channels=${destination_channels%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.destination.streams=${destination_streams%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.source.channels=${source_channels%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.source.streams=${source_streams%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.passive.channels=${passive_channels%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.passive.streams=${passive_streams%?}" \
        "aeron.threading.mode=DEDICATED"
    done
  done
done

download_results "echo-results.zip" "$BENCHMARKS_PATH/scripts/results" "$DIR/.."