#!/usr/bin/env bash
##
## Copyright 2015-2024 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## Script to capture environment information useful to contextualize benchmark results
##

set -e

REQUIRED_TOOLS=( "jq" "lsb_release" )

for i in "${REQUIRED_TOOLS[@]}"
do
  if ! command -v "$i" &> /dev/null; then
    echo "$i not installed, cannot collect environment information."
    exit 0
  fi
done

OUTPUT_PATH=${1:-.}
JDK_HOME=${2:-$JAVA_HOME}
FILE_NAME="env-summary-$(hostname)"

MANUFACTURER=$(cat /sys/class/dmi/id/chassis_vendor)
PRODUCT_NAME=$(cat /sys/class/dmi/id/product_name)
MACHINE_TYPE=$(vserver=$(lscpu | grep -c Hypervisor); if [ "$vserver" -gt 0 ]; then echo "VM"; else echo "Physical"; fi)
OPERATING_SYSTEM=$(lsb_release -d -s)
KERNEL=$(uname -r)
ARCHITECTURE=$(arch)
CPU_NAME=$(awk -F':' '/^model name/ {print $2}' /proc/cpuinfo | uniq | sed -e 's/^[ \t]*//')
CMDLINE=$(cat /proc/cmdline)
if which tuned-adm > /dev/null
then
  TUNED_PROFILE=$(tuned-adm profile | grep "Current active profile:" | cut -d':' -f2 | sed 's/^ *//g')
else
  TUNED_PROFILE="container"
fi
if [[ -z $JDK_HOME ]]; then
  JAVA_VERSION="Java not available"
else
  JAVA_VERSION=$("$JDK_HOME/bin/java" -Xinternalversion 2>&1)
fi
OPENSSL_VERSION=$(openssl version)

TOPO=$(lstopo --of txt)
TOPO_JSON=$(jq -n --arg topo "$TOPO" '{ topology: $topo }')

JSON_SUMMARY=$( jq -n \
                  --arg manufacturer "$MANUFACTURER" \
                  --arg product_name "$PRODUCT_NAME" \
                  --arg machine_type "$MACHINE_TYPE" \
                  --arg os "$OPERATING_SYSTEM" \
                  --arg kernel "$KERNEL" \
                  --arg arch "$ARCHITECTURE" \
                  --arg cpu "$CPU_NAME" \
                  --arg cmd_line "$CMDLINE" \
                  --arg tuned_profile "$TUNED_PROFILE" \
                  --arg java_version "$JAVA_VERSION" \
                  --arg ssl_version "$OPENSSL_VERSION" \
                  '{manufacturer: $manufacturer, product_name: $product_name, machine_type: $machine_type, operating_system: $os, kernel: $kernel, architecture: $arch, cpu_name: $cpu, cmdline: $cmd_line, tuned_profile: $tuned_profile, java_version: $java_version, openssl_version: $ssl_version}' )

MOUNTS_TXT=$(mount | grep -P '^[0-9]+|^\/dev\/(?!loop)|\/dev\/shm')
MOUNTS_JSON=$(grep -P '^[0-9]+|^\/dev\/(?!loop)|\/dev\/shm' /proc/mounts | jq -nR '{ mounts: [inputs | split(" ")] | map({ device_location: .[0], mount_point: .[1], type: .[2], options: .[3] }) }')

STORAGE_SUMMARY_TXT=$(lsblk --output NAME,MODEL,FSTYPE,SIZE,SCHED,PHY-SEC,LOG-SEC,RQ-SIZE --exclude 7 --nodeps)
STORAGE_SUMMARY_JSON=$(lsblk --output NAME,MODEL,FSTYPE,SIZE,SCHED,PHY-SEC,LOG-SEC,RQ-SIZE --exclude 7 --nodeps --json)

EC2_JSON=""
EC2_TXT=""
if [[ $MANUFACTURER == "Amazon EC2" ]]; then
  if command -v aws &> /dev/null; then
    id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
    INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids "$id" | jq '.Reservations[] .Instances[] | { instanceId: .InstanceId, name:(.Tags[] | select(.Key=="Name") .Value) }')
    VOLUME_INFO=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$id")
    EC2_JSON=("$(echo "$INSTANCE_INFO $VOLUME_INFO" | jq -s add)")
    EC2_TXT="$EC2_TXT
$(echo "$INSTANCE_INFO" | jq -r '.instanceId')
===================
Name:    $(echo "$INSTANCE_INFO" | jq -r '.name')
Volumes:
$(echo "$VOLUME_INFO" | jq -r '.Volumes[] | "- \(.VolumeId) size: \(.Size)GB type: \(.VolumeType) iops: \(.Iops) throughput: \(.Throughput)"')

"
  fi
elif [[ $MANUFACTURER == "Google" ]]; then
  if command -v gcloud &> /dev/null; then
    GCP_TXT=""
    INSTANCE_ID="$(curl -s "http://metadata/computeMetadata/v1/instance/id" -H "Metadata-Flavor: Google")"
    INSTANCE_SELF_LINK="$(gcloud beta compute instances list --filter id="$INSTANCE_ID" --format="get(selfLink)")"
    INSTANCE=$(gcloud beta compute instances list --filter selfLink="$INSTANCE_SELF_LINK" --format="table(name, zone, machine_type.basename())" | tail -1)
    DISKS=$(gcloud beta compute disks list --filter users="$INSTANCE_SELF_LINK")
    GCP_TXT="$GCP_TXT

$(echo "$INSTANCE")
$(for ((i=0;i<=${#INSTANCE};i++)); do echo -n "="; done)

Volumes
-------

$DISKS"

    GCP_JSON=$(gcloud beta compute instances list --filter id="$INSTANCE_ID" --format="json" | jq -s '{ compute_instances: . }')
  fi
fi

JSON_SUMMARY=$(echo "$JSON_SUMMARY $MOUNTS_JSON $STORAGE_SUMMARY_JSON $TOPO_JSON $EC2_JSON $GCP_JSON" | jq -s add)
echo "$JSON_SUMMARY" > "$OUTPUT_PATH/${FILE_NAME}.json"

CPU_INFO=$(lscpu)

TXT_SUMMARY="Manufacturer:     $MANUFACTURER
Product name:     $PRODUCT_NAME
Machine type:     $MACHINE_TYPE
Operating system: $OPERATING_SYSTEM
Kernel:           $KERNEL
Kernel cmdline:   $CMDLINE
Architecture:     $ARCHITECTURE
CPU name:         $CPU_NAME
tuned profile:    $TUNED_PROFILE
Java version:     $JAVA_VERSION
OpenSSL version:  $OPENSSL_VERSION

Mount points
============
$MOUNTS_TXT

Block devices
=============
$STORAGE_SUMMARY_TXT

CPUs
====
$CPU_INFO

Topology
========
$TOPO
"

echo "$TXT_SUMMARY" > "$OUTPUT_PATH/${FILE_NAME}.txt"

if [[ -n "$EC2_TXT" ]]; then
  EC2_SUMMARY="Amazon EC2
==========
$EC2_TXT
"
  echo "$EC2_SUMMARY" >> "$OUTPUT_PATH/${FILE_NAME}.txt"
fi

if [[ -n "$GCP_TXT" ]]; then
  GCP_SUMMARY="Google Cloud Compute
====================
$GCP_TXT
"
  echo "$GCP_SUMMARY" >> "$OUTPUT_PATH/${FILE_NAME}.txt"
fi
