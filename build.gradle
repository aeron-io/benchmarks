/*
 * Copyright 2015-2020 Real Logic Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'idea'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id 'com.google.protobuf' version '0.8.12' apply false
}

defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
}

def agronaVersion = '1.4.1'
def aeronVersion = '1.27.0'
def jmhVersion = '1.23'
def hdrHistogramVersion = '2.1.12'
def disruptorVersion = '3.4.2'
def junitVersion = '5.6.2'
def mockitoVersion = '3.3.3'
def checkstyleVersion = '8.28'
def grpcVersion = '1.29.0'
def protobufVersion = '3.11.4'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'

    dependencies {
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    checkstyle.toolVersion = "${checkstyleVersion}"

    tasks.withType(Jar) {
        enabled = true
        includeEmptyDirs = false
    }

    tasks.withType(JavaCompile) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        }
        options.compilerArgs.add('-XDignore.symbol.file') // Suppress warnings about using Unsafe
        options.fork = true
        options.forkOptions.javaHome = file("${System.env.JAVA_HOME}")
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    tasks.withType(Test) {
        useJUnitPlatform()

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
}

project(':benchmarks-api') {
    dependencies {
        api "org.agrona:agrona:${agronaVersion}"
        implementation "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"
    }
}

project(':benchmarks-aeron') {
    dependencies {
        api project(':benchmarks-api')
        annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
        implementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
        implementation "io.aeron:aeron-archive:${aeronVersion}"
        implementation "com.lmax:disruptor:${disruptorVersion}"
    }
}

project(':benchmarks-grpc') {
    apply plugin: 'com.google.protobuf'

    dependencies {
        api project(':benchmarks-api')
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    }

    protobuf {
        protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
        plugins {
            grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
        }
        generateProtoTasks {
            all()*.plugins { grpc {} }
        }
    }
}

project(':benchmarks-all') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation project(':benchmarks-aeron')
        implementation project(':benchmarks-grpc')
    }

    shadowJar {
        archiveFileName = 'benchmarks.jar'
        manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
    }

    jar.finalizedBy shadowJar
}

task runJavaBenchmarks(type: Exec, dependsOn: ':benchmarks-all:shadowJar') {
    commandLine 'java',
    '-jar', 'benchmarks-all/build/libs/benchmarks.jar',
    '-jvmArgs', '-Dagrona.disable.bounds.checks=true -XX:+UseParallelOldGC',
    '-wi', '3', '-w', '1s', '-i', '5', '-r', '1s', '-tu', 'ns', '-f', '5'
}

task runAeronJavaBenchmarks(type: Exec, dependsOn: ':benchmarks-all:shadowJar') {
    commandLine 'java',
    '-jar', 'benchmarks-all/build/libs/benchmarks.jar',
    '-jvmArgs', '-Dagrona.disable.bounds.checks=true -XX:+UseParallelOldGC',
    'Aeron',
    '-wi', '3', '-w', '1s', '-i', '5', '-r', '1s', '-tu', 'ns', '-f', '5'
}

wrapper {
    gradleVersion = '6.4'
    distributionType = 'ALL'
}