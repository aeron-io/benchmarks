#!/usr/bin/env bash
##
## Copyright 2015-2025 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

if [[ ! -v MESSAGE_RATE ]];
then
  export MESSAGE_RATE="25K,25K,25K"
fi

serverPort=13400
if [[ -v SERVER_PORT && -n ${SERVER_PORT} ]];
then
  serverPort=${SERVER_PORT}
fi

clientPort=13500
if [[ -v CLIENT_PORT && -n ${CLIENT_PORT} ]];
then
  clientPort=${CLIENT_PORT}
fi

source "${DIR}/../remote-benchmarks-runner"

required_vars=(
  "CLIENT_JAVA_HOME"
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_CPU_NODE"
  "SERVER_JAVA_HOME"
  "SERVER_BENCHMARKS_PATH"
  "CLIENT_HOST"
  "SERVER_HOST"
  "SERVER_CPU_NODE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]];
then
  exit 1
fi

context=""
tls_options=("false" "true")
onload="onload --profile=latency"
download_dir="${DIR}/.."

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --context)
    context="${2}"
    shift
    shift
    ;;
  --no-tls)
    tls_options=("false")
    shift
    ;;
  --no-onload)
    onload=""
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --download-dir)
    download_dir="${2}"
    shift
    shift
    ;;
  -h|--help)
    echo "${0} [--context \"\$context\"] [--no-tls] [--no-onload] [--onload \"\$onload_command\"] [--download-dir \"\$download_dir\"]"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

test_type="grpc"
test_dir="${test_type}-$(date '+%Y-%m-%d-%H-%M-%S')"
output_dir="scripts/results/${test_dir}"
for tls in "${tls_options[@]}"
do
  scenario="streaming"

  if [ "${tls}" == "true" ]
  then
      scenario="${scenario}-tls"
  fi

  if [ -n "${onload}" ]
  then
      scenario="${scenario}-onload"
  fi

  test="${test_type}_${scenario}_${context}"

  echo -e "\n Testing scenario: '${test}'\n"

  start_client="export JAVA_HOME=\"${CLIENT_JAVA_HOME}\" PROCESS_FILE_NAME=\"grpc-client\"\
  ; $(kill_java_process "io.aeron.benchmarks.LoadTestRig") \
  ; numactl --membind=${CLIENT_CPU_NODE} --cpunodebind=${CLIENT_CPU_NODE} ${onload} ${CLIENT_BENCHMARKS_PATH}/scripts/grpc/client & \
  $(await_java_process_start "io.aeron.benchmarks.LoadTestRig"); \
  $(pin_thread "\${pid}" "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}") \
  && tail --pid=\$! -f /dev/null"

  # shellcheck disable=SC2153
  start_server="export JAVA_HOME=\"${SERVER_JAVA_HOME}\" PROCESS_FILE_NAME=\"grpc-server\"\
  && numactl --membind=${SERVER_CPU_NODE} --cpunodebind=${SERVER_CPU_NODE} ${onload} ${SERVER_BENCHMARKS_PATH}/scripts/grpc/server"

  stop_server="$(stop_java_process "io.aeron.benchmarks.grpc.EchoServer")"

  # shellcheck disable=SC2153
  run_benchmarks \
    "${start_client}" \
    "${stop_server}; ${start_server}" \
    "${stop_server}" \
    "${CLIENT_BENCHMARKS_PATH}/${output_dir}/${scenario}" \
    "${SERVER_BENCHMARKS_PATH}/${output_dir}/${scenario}" \
    "-Dio.aeron.benchmarks.output.file=${test} \
    -Dio.aeron.benchmarks.grpc.client.host=${CLIENT_HOST} \
    -Dio.aeron.benchmarks.grpc.client.port=${clientPort} \
    -Dio.aeron.benchmarks.grpc.server.host=${SERVER_HOST} \
    -Dio.aeron.benchmarks.grpc.server.port=${serverPort} \
    -Dio.aeron.benchmarks.grpc.certificates=${CLIENT_BENCHMARKS_PATH}/certificates \
    -Dio.aeron.benchmarks.grpc.tls=${tls}" \
    "-Dio.aeron.benchmarks.grpc.client.host=${CLIENT_HOST} \
    -Dio.aeron.benchmarks.grpc.client.port=${clientPort} \
    -Dio.aeron.benchmarks.grpc.server.host=${SERVER_HOST} \
    -Dio.aeron.benchmarks.grpc.server.port=${serverPort} \
    -Dio.aeron.benchmarks.grpc.certificates=${SERVER_BENCHMARKS_PATH}/certificates \
    -Dio.aeron.benchmarks.grpc.tls=${tls}"
done

collect_environment_info "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/scripts" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${CLIENT_JAVA_HOME}"
collect_environment_info "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/scripts" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${SERVER_JAVA_HOME}"
download_results "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${download_dir}" "${test_dir}-client"
download_results "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${download_dir}" "${test_dir}-server"
