#!/usr/bin/env bash
##
## Copyright 2015-2025 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

if [[ ! -v MESSAGE_RATE ]];
then
  export MESSAGE_RATE="25K,25K,25K"
fi

source "${DIR}/../remote-benchmarks-runner"

required_vars=(
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_JAVA_HOME"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_CPU_NODE"
  "SERVER_BENCHMARKS_PATH"
  "SERVER_JAVA_HOME"
  "SERVER_HOST"
  "SERVER_CPU_NODE"
  "SERVER_KAFKA_DIR")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]];
then
  exit 1
fi

context=""
security_protocols=("PLAINTEXT" "SSL")
onload="onload --profile=latency"
download_dir="${DIR}/.."

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --context)
    context="${2}"
    shift
    shift
    ;;
  --no-ssl)
    security_protocols=("PLAINTEXT")
    shift
    ;;
  --no-onload)
    onload=""
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --download-dir)
    download_dir="${2}"
    shift
    shift
    ;;
  -h|--help)
    echo "${0} [--context \"\$context\"] [--no-ssl] [--no-onload] [--onload \"\$onload_command\"] [--download-dir \"\$download_dir\"]"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

plain_text_port=13592
ssl_port=13593
test_type="kafka"
test_dir="${test_type}-$(date '+%Y-%m-%d-%H-%M-%S')"
output_dir="scripts/results/${test_dir}"
for protocol in "${security_protocols[@]}"
do
  for flush in "" "1"
  do
    scenario=()

    if [ -n "${onload}" ]
    then
        scenario+=("onload")
    fi

    flush_messages_prop=""
    if [ -n "${flush}" ]
    then
        flush_messages_prop="-Dflush.messages=${flush}"
        scenario+=("flush-${flush}")
    else
        scenario+=("no-flush")
    fi

    if [ "${protocol}" == "PLAINTEXT" ]
    then
      port=${plain_text_port}
    else
      scenario+=("ssl")
      port=${ssl_port}
    fi

    test=$(printf "-%s" "${scenario[@]}")
    test="${test_type}_${test:1}_${context}"

    echo -e "\n Testing scenario: '${test}'\n"

    start_client="
      set -e

      export JAVA_HOME=\"${CLIENT_JAVA_HOME}\"
      export PROCESS_FILE_NAME=\"kafka-client\"

      $(kill_java_process "io.aeron.benchmarks.LoadTestRig")

      numactl --membind=${CLIENT_CPU_NODE} --cpunodebind=${CLIENT_CPU_NODE} \
        ${onload} ${CLIENT_BENCHMARKS_PATH}/scripts/kafka/client &

      $(await_java_process_start \"io.aeron.benchmarks.LoadTestRig\")

      $(pin_thread \"\${pid}\" \"load-test-rig\" \"${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}\")

      tail --pid=\$! -f /dev/null
      "

    server_scripts_path="${SERVER_BENCHMARKS_PATH}/scripts/kafka"

    start_kafka="
      set -e

      cp ${server_scripts_path}/server.properties ${server_scripts_path}/server.properties.bak

      echo -e \"log.dirs=${SERVER_KAFKA_DIR}/logs
      ssl.truststore.location=${SERVER_BENCHMARKS_PATH}/certificates/truststore.p12
      ssl.keystore.location=${SERVER_BENCHMARKS_PATH}/certificates/server.keystore
      advertised.listeners=PLAINTEXT://${SERVER_HOST}:${plain_text_port},SSL://${SERVER_HOST}:${ssl_port}\" >> ${server_scripts_path}/server.properties

      export JAVA_HOME=\"${SERVER_JAVA_HOME}\"

      numactl --membind=${SERVER_CPU_NODE} --cpunodebind=${SERVER_CPU_NODE} \
        ${onload} ${server_scripts_path}/kafka-start
      "

    stop_server="
      set -e

      export JAVA_HOME=\"${SERVER_JAVA_HOME}\"

      KAFKA_DATA_DIR=\"${SERVER_KAFKA_DIR}\" ${server_scripts_path}/stop-all

      mv ${server_scripts_path}/server.properties.bak ${server_scripts_path}/server.properties
      "

    run_benchmarks \
      "${start_client}" \
      "${stop_server}; ${start_kafka}" \
      "${stop_server}" \
      "${CLIENT_BENCHMARKS_PATH}/${output_dir}/${test:1}" \
      "${SERVER_BENCHMARKS_PATH}/${output_dir}/${test:1}" \
      "-Dio.aeron.benchmarks.output.file=${test} \
      -Dbootstrap.servers=${SERVER_HOST}:${port} \
      -Dsecurity.protocol=${protocol} \
      -Dssl.truststore.location=${CLIENT_BENCHMARKS_PATH}/certificates/truststore.p12 \
      -Dssl.keystore.location=${CLIENT_BENCHMARKS_PATH}/certificates/client.keystore \
      ${flush_messages_prop}" \
      ""
  done
done

collect_environment_info "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/scripts" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${CLIENT_JAVA_HOME}"
collect_environment_info "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/scripts" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${SERVER_JAVA_HOME}"
download_results "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${download_dir}" "${test_dir}-client"
download_results "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${download_dir}" "${test_dir}-server"
