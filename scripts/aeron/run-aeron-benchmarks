#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

# temp
SSH_USER=test
SSH_HOST_1=192.168.56.101
SSH_HOST_2=192.168.56.102
BENCHMARKS_PATH=/home/test/dev/aeron-benchmarks
HOST_1_JAVA_HOME="/home/test/dev/zulu8.50.0.51-ca-jdk8.0.275-linux_x64"
HOST_2_JAVA_HOME="/home/test/dev/zulu8.50.0.51-ca-jdk8.0.275-linux_x64"
NODE_1_CORE_0="3-5"
NODE_1_CORE_1=0
NODE_1_CORE_2=1
NODE_1_CORE_3=2
NODE_2_CORE_0="3-5"
NODE_2_CORE_1=0
NODE_2_CORE_2=1
NODE_2_CORE_3=2

ITERATIONS=3
NUMBER_OF_MESSAGES=1000
BURST_SIZE=1
MESSAGE_LENGTH=32
RUNS=2

required_vars=(
"SSH_USER" \
"SSH_HOST_1" \
"SSH_HOST_2" \
"BENCHMARKS_PATH" \
"NODE_1_CORE_0" \
"NODE_1_CORE_2" \
"NODE_1_CORE_3" \
"NODE_2_CORE_0" \
"NODE_2_CORE_2" \
"NODE_2_CORE_3" \
)

for var in "${required_vars[@]}"; do
  if [[ -z "${!var}" ]]
  then
    echo "env var $var is required"
    required_var_missing=true
  fi
done

if [ -n "$required_var_missing" ];
then
  exit 1
fi

if [ -z "$RUNS" ];
then
  RUNS=5
fi

if [ -z "$ITERATIONS" ];
then
  ITERATIONS=10
fi

if [ -z "$NUMBER_OF_MESSAGES" ];
then
  NUMBER_OF_MESSAGES=10000
fi

if [ -z "$BURST_SIZE" ];
then
  BURST_SIZE="1,10"
fi

if [ -z "$MESSAGE_LENGTH" ];
then
  MESSAGE_LENGTH="32,224,1378"
fi

function pin_all_threads()
{
  echo "taskset -p -a -c $2 $1"
}

function pin_thread()
{
  echo "taskset -p -c $2 $1"
}

function get_thread_id()
{
  local pid=$1
  local thread_name=$2
  echo "\$(ps Ho tid,fname -p $pid | grep \"$thread_name\" | awk '{print \$1}')"
}

function background_command()
{
  local executable=$1
  local other_cores=$2

  local command=""
  command+="$executable& script_pid=\$! && command_pid=\$script_pid && sleep 1"
  command+="&& pid=\$command_pid; while [ \"\$pid\" ]; do command_pid=\$pid; echo \"command_pid=\$command_pid\"; pid=\$(ps -o pid= --ppid \$pid | sed 's/^ *//;s/ *$//'); done"

  command+=" && $(pin_all_threads \$command_pid "$other_cores")"

  shift
  shift
  while [[ $# -gt 0 ]]
  do
    local thread_name=$1
    local core=$2
    local thread_id="$(get_thread_id \$command_pid "$thread_name")"
    command+=" && tid=$thread_id && $(pin_thread \$tid "$core")"
    shift
    shift
  done

  echo $command
}

function launch_c_driver()
{
  local exec=$1
  local core0=$2
  local core1=$3
  local core2=$4
  local core3=$5
  echo $(background_command "$exec" "$core0" "aeronmd" "$core1" "sender" "$core2" "receiver" "$core3")
}

function run_benchmarks()
{
  local client_command="$1"
  local server_command="$2"
  local config_file="$3"
  local config_options=("${@:4}")

  for messages in "${NUMBER_OF_MESSAGES[@]}"
  do
    for burst in "${BURST_SIZE[@]}"
    do
      for length in "${MESSAGE_LENGTH[@]}"
      do
        for (( i=1; i<=RUNS; i++ ))
        do
          echo -e '\n#######################'
          echo 'Benchmark run #'$i' ...'
          echo '#######################'

          config_options+=("uk.co.real_logic.benchmarks.remote.iterations=${ITERATIONS}")
          config_options+=("uk.co.real_logic.benchmarks.remote.messages=${messages# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.batchSize=${burst# }")
          config_options+=("uk.co.real_logic.benchmarks.remote.messageLength=${length# }")

          local jvm_opts="rm -f $config_file"
          for opt in "${config_options[@]}";
          do
            jvm_opts+=" && echo '$opt' >> $config_file"
          done

          ssh $SSH_USER@$SSH_HOST_2 "$jvm_opts && $server_command" &
          ssh $SSH_USER@$SSH_HOST_1 "$jvm_opts && $client_command"
          wait # wait for the server command to complete
        done
      done
    done
  done
}

run_benchmarks \
           "$(launch_c_driver "$BENCHMARKS_PATH/scripts/aeron/c-media-driver"\
           "$NODE_1_CORE_0" "$NODE_1_CORE_1" "$NODE_1_CORE_2" "$NODE_1_CORE_3") \
           && export JAVA_HOME=\"$HOST_1_JAVA_HOME\" && $BENCHMARKS_PATH/scripts/aeron/echo-client \
           && kill -9 \$command_pid && wait" \
           \
           "$(launch_c_driver "$BENCHMARKS_PATH/scripts/aeron/c-media-driver"\
           "$NODE_2_CORE_0" "$NODE_2_CORE_1" "$NODE_2_CORE_2" "$NODE_2_CORE_3") \
           && export JAVA_HOME=\"$HOST_2_JAVA_HOME\" && $BENCHMARKS_PATH/scripts/aeron/echo-server \
           && kill -9 \$command_pid && wait" \
           "$BENCHMARKS_PATH/scripts/aeron/benchmark.properties" \
           "uk.co.real_logic.benchmarks.remote.outputFileNamePrefix=ssh-test" \
           "aeron.threading.mode=SHARED" \
           "aeron.archive.threading.mode=SHARED" \
           "uk.co.real_logic.benchmarks.aeron.remote.destination.channels=aeron:udp?endpoint=192.168.56.102:13333|interface=192.168.56.0/24" \
           "uk.co.real_logic.benchmarks.aeron.remote.source.channels=aeron:udp?endpoint=192.168.56.101:13334|interface=192.168.56.0/24"
