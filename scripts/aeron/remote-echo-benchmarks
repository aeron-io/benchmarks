#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${DIR}/remote-benchmarks-helper"
source "${DIR}/../remote-benchmarks-runner"

required_vars=(
  "BENCHMARKS_PATH"
  "NODE_1_CORE_0"
  "NODE_1_CORE_1"
  "NODE_1_CORE_2"
  "NODE_1_CORE_3"
  "NODE_2_CORE_0"
  "NODE_2_CORE_1"
  "NODE_2_CORE_2"
  "NODE_2_CORE_3"
  "AERON_DESTINATION_CHANNELS"
  "AERON_SOURCE_CHANNELS")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var}" ]]
  then
    echo "env var $var must be set"
    required_var_missing=true
  fi
done

if [ -n "$required_var_missing" ];
then
  exit 1
fi

function build_drivers()
{
  local commands=()

  # Java driver
  commands+=("$(start_media_driver "$BENCHMARKS_PATH/scripts/aeron/media-driver" "$1" "$2" "$3" "$4")")

  # Java driver with Onload
  commands+=("$(start_media_driver \
    "onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/media-driver" "$1" "$2" "$3" "$4")")

  # C driver
  commands+=("$(start_media_driver "$BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  # C driver with Onload
  commands+=("$(start_media_driver \
    "onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  # C driver with ef_vi
  commands+=("$(start_media_driver \
    "AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
    AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_ef_vi.so\" \
    $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  # C driver with ATS
  commands+=("$(start_media_driver \
    "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
    AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
    AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\" \
    $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  # C driver with ATS and Onload
  commands+=("$(start_media_driver \
    "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
    AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
    AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\" \
    onload --profile=latency --force-profiles $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  # C driver with ATS and ef_vi
  commands+=("$(start_media_driver \
    "AERON_TRANSPORT_SECURITY_CONF_DIR=\"$BENCHMARKS_PATH/scripts/aeron\" \
    AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
    AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
    AERON_DRIVER_DYNAMIC_LIBRARIES=\"$BENCHMARKS_PATH/scripts/aeron/libaeron_transport_security.so\",\"$BENCHMARKS_PATH/scripts/aeron/libaeron_ef_vi.so\" \
    AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
    $BENCHMARKS_PATH/scripts/aeron/c-media-driver" "$1" "$2" "$3" "$4")")

  local IFS=$'\n'
  echo "${commands[*]}"
}

OLD_IFS=$IFS
IFS=$'\n'
client_drivers=($(build_drivers "$NODE_1_CORE_0" "$NODE_1_CORE_1" "$NODE_1_CORE_2" "$NODE_1_CORE_3"))
server_drivers=($(build_drivers "$NODE_2_CORE_0" "$NODE_2_CORE_1" "$NODE_2_CORE_2" "$NODE_2_CORE_3"))
IFS=$OLD_IFS

scenarios=("java" "java-onload" "c" "c-onload" "c-ef_vi" "c-ats" "c-ats-onload" "c-ats-ef_vi")
for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"
  client_driver="${client_drivers[index]}"
  server_driver="${server_drivers[index]}"

  echo -e '\n Testing scenario: '$scenario'\n'

  run_benchmarks \
    "export JAVA_HOME=\"$HOST_1_JAVA_HOME\" && $client_driver && $BENCHMARKS_PATH/scripts/aeron/echo-client && kill \$driver_pid; wait" \
    "export JAVA_HOME=\"$HOST_2_JAVA_HOME\" && $server_driver && $BENCHMARKS_PATH/scripts/aeron/echo-server && kill \$driver_pid; wait" \
    "$BENCHMARKS_PATH/scripts/aeron/benchmark.properties" \
    "uk.co.real_logic.benchmarks.remote.outputFileNamePrefix=echo-$scenario" \
    "uk.co.real_logic.benchmarks.remote.outputDirectory=$BENCHMARKS_PATH/scripts/results" \
    "aeron.threading.mode=DEDICATED" \
    "$AERON_DESTINATION_CHANNELS" \
    "$AERON_SOURCE_CHANNELS"
done

download_results "echo-results.zip" "$BENCHMARKS_PATH/scripts/results" "$DIR/.."