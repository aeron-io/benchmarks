#!/usr/bin/env bash
##
## Copyright 2015-2023 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_JAVA_HOME"
  "CLIENT_DRIVER_CONDUCTOR_CPU_CORE"
  "CLIENT_DRIVER_SENDER_CPU_CORE"
  "CLIENT_DRIVER_RECEIVER_CPU_CORE"
  "CLIENT_DRIVER_OTHER_CPU_CORES"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES"
  "CLIENT_INGRESS_CHANNEL"
  "CLIENT_INGRESS_ENDPOINTS"
  "CLIENT_EGRESS_CHANNEL"
  "CLUSTER_MEMBERS"
  "CLUSTER_SIZE"
  "_BENCHMARKS_PATH"
  "_JAVA_HOME"
  "_DRIVER_CONDUCTOR_CPU_CORE"
  "_DRIVER_SENDER_CPU_CORE"
  "_DRIVER_RECEIVER_CPU_CORE"
  "_DRIVER_OTHER_CPU_CORES"
  "_ARCHIVE_RECORDER_CPU_CORE"
  "_ARCHIVE_REPLAYER_CPU_CORE"
  "_ARCHIVE_CONDUCTOR_CPU_CORE"
  "_CONSENSUS_MODULE_CPU_CORE"
  "_CLUSTERED_SERVICE_CPU_CORE"
  "_OTHER_CPU_CORES"
  "_CLUSTER_DIR"
  "_CLUSTER_CONSENSUS_CHANNEL"
  "_CLUSTER_INGRESS_CHANNEL"
  "_CLUSTER_LOG_CHANNEL"
  "_CLUSTER_REPLICATION_CHANNEL"
  "_ARCHIVE_DIR"
  "_ARCHIVE_CONTROL_CHANNEL")

for var in "${required_vars[@]}"; do
  if [[ ${var} == _* ]]
  then
    for ((n = 0; n < CLUSTER_SIZE; n++))
    do
      node_var="NODE${n}${var}"
      if [[ -z "${!node_var+''}" ]]; then
        echo "env var '${node_var}' must be set"
        required_var_missing=true
      fi
    done
  else
    if [[ -z "${!var+''}" ]]
    then
      echo "env var '${var}' must be set"
      required_var_missing=true
    fi
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]]
then
  exit 1
fi

ef_vi_rxq_size=${EF_VI_RXQ_SIZE:-1024} # ef_vi receive queue size
ef_vi_txq_size=${EF_VI_TXQ_SIZE:-2048} # ef_vi send queue size
so_sndbuf="${AERON_SOCKET_SO_SNDBUF:-2m}"
so_rcvbuf="${AERON_SOCKET_SO_RCVBUF:-2m}"
rcv_initial_window="${AERON_RCV_INITIAL_WINDOW_LENGTH:-2m}"
max_messages_per_send="${AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND:-2}"

enable_java_driver=1
no_java_driver=0
enable_c_driver=1
no_c_driver=0
enable_onload=1
enable_ef_vi=1
enable_dpdk=1
enable_ats=1
file_sync_levels=(0)
mtu_list=(1408 8192)
results_file="aeron-cluster-results"
onload="onload --profile=latency --force-profiles "

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --disable-c-driver)
    enable_c_driver=0
    shift
    ;;
  --no-c-driver)
    no_c_driver=1
    shift
    ;;
  --disable-java-driver)
    enable_java_driver=0
    shift
    ;;
  --no-java-driver)
    no_java_driver=1
    shift
    ;;
  --no-onload)
    enable_onload=0
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --no-ef_vi)
    enable_ef_vi=0
    shift
    ;;
  --no-dpdk)
    enable_dpdk=0
    shift
    ;;
  --no-ats)
    enable_ats=0
    shift
    ;;
  --file-sync-level)
    IFS=','
    read -ra file_sync_levels <<<"${2}"
    unset IFS
    shift
    shift
    ;;
  --results-file)
    results_file="${2}"
    shift
    shift
    ;;
  --mtu)
    IFS=','
    read -ra mtu_list <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  -h | --help)
    echo "${0} [--no-c-driver] [--no-java-driver] [--no-onload] [--onload \"\$onload_command\"] [--no-ef_vi] [--no-dpdk] [--no-ats] [--file-sync-level \"\${file-sync-level-csv}\"] [--mtu \"\$mtu-csv\"]"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

if [ "${enable_java_driver}" -ne 1 ] && [ "${enable_c_driver}" -ne 1 ]
then
  echo "At least C or Java driver must be enabled!"
  exit 1
fi

connectionTimeout="${CONNECTION_TIMEOUT:-60s}"

runs=${RUNS:-5}
iterations=${iterations:-10}
warmupIterations=${warmupIterations:-10}
warmupMessageRate="${WARMUP_MESSAGE_RATE:-10K}"

messageRates=("1M" "500K" "100K")
if [[ -v MESSAGE_RATE && -n ${MESSAGE_RATE} ]];
then
  IFS=',';
  read -ra messageRates <<< "${MESSAGE_RATE}"
  unset IFS;
fi

messageLengths=(32 288 1344)
if [[ -v MESSAGE_LENGTH && -n ${MESSAGE_LENGTH} ]];
then
  IFS=',';
  read -ra messageLengths <<< "${MESSAGE_LENGTH}"
  unset IFS;
fi

if [[ "${#messageRates[@]}" != "${#messageLengths[@]}" ]];
then
  echo "MESSAGE_RATE and MESSAGE_LENGTH number of elements do not match: ${#messageRates[@]} vs ${#messageLengths[@]}"
  exit 1
fi

burstSizes=(1)
if [[ -v BURST_SIZE && -n ${BURST_SIZE} ]];
then
  IFS=',';
  read -ra burstSizes <<< "${BURST_SIZE}"
  unset IFS;
fi

function start_server()
{
  local cluster_node_class_name=${1}
  local server_driver=${2}
  local fsync=${3}
  local mtu=${4}
  local node_id=${5}
  local benchmarks_path_var=NODE${node_id}_BENCHMARKS_PATH
  local java_home_var=NODE${node_id}_JAVA_HOME
  local cluster_dir_var=NODE${node_id}_CLUSTER_DIR
  local cluster_consensus_channel_var=NODE${node_id}_CLUSTER_CONSENSUS_CHANNEL
  local cluster_ingress_channel_var=NODE${node_id}_CLUSTER_INGRESS_CHANNEL
  local cluster_log_channel_var=NODE${node_id}_CLUSTER_LOG_CHANNEL
  local cluster_replication_channel_var=NODE${node_id}_CLUSTER_REPLICATION_CHANNEL
  local archive_dir_var=NODE${node_id}_ARCHIVE_DIR
  local archive_control_channel_var=NODE${node_id}_ARCHIVE_CONTROL_CHANNEL
  local archive_replication_channel_var=NODE${node_id}_ARCHIVE_REPLICATION_CHANNEL
  local other_cpu_cores_var=NODE${node_id}_OTHER_CPU_CORES
  local archive_recorder_cpu_var=NODE${node_id}_ARCHIVE_RECORDER_CPU_CORE
  local archive_replayer_cpu_var=NODE${node_id}_ARCHIVE_REPLAYER_CPU_CORE
  local archive_conductor_cpu_var=NODE${node_id}_ARCHIVE_CONDUCTOR_CPU_CORE
  local consensus_module_cpu_var=NODE${node_id}_CONSENSUS_MODULE_CPU_CORE
  local clustered_service_cpu_var=NODE${node_id}_CLUSTERED_SERVICE_CPU_CORE
  echo "
    export JAVA_HOME=\"${!java_home_var}\" \
    ; $(kill_java_process "${cluster_node_class_name}") \
    ; rm -rf \"${!cluster_dir_var}\" \
    ; rm -rf \"${!archive_dir_var}\" \
    ; ${server_driver} \
    && export JVM_OPTS=\"\
    -Duk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${connectionTimeout} \
    -Daeron.mtu.length=${mtu} \
    -Daeron.cluster.dir=${!cluster_dir_var} \
    -Daeron.cluster.idle.strategy=noop \
    -Daeron.cluster.members=${CLUSTER_MEMBERS} \
    -Daeron.cluster.member.id=${node_id} \
    -Daeron.cluster.consensus.channel=${!cluster_consensus_channel_var} \
    -Daeron.cluster.ingress.channel=${!cluster_ingress_channel_var} \
    -Daeron.cluster.log.channel=${!cluster_log_channel_var} \
    -Daeron.cluster.replication.channel=${!cluster_replication_channel_var} \
    -Daeron.cluster.service.name=echo-service \
    -Daeron.archive.dir=${!archive_dir_var} \
    -Daeron.archive.control.channel=${!archive_control_channel_var} \
    -Daeron.archive.replication.channel=${!archive_replication_channel_var} \
    -Daeron.archive.file.sync.level=${fsync} \
    -Daeron.archive.catalog.file.sync.level=${fsync} \
    -Daeron.archive.recording.events.enabled=false\" \
    && taskset -c ${!other_cpu_cores_var} ${!benchmarks_path_var}/scripts/aeron/cluster-node & \
    $(await_java_process_start "${cluster_node_class_name}") \
    ; $(pin_thread \${pid} "archive-recorde" "${!archive_recorder_cpu_var}") \
    ; $(pin_thread \${pid} "archive-replaye" "${!archive_replayer_cpu_var}") \
    ; $(pin_thread \${pid} "archive-conduct" "${!archive_conductor_cpu_var}") \
    ; $(pin_thread \${pid} "consensus-modul" "${!consensus_module_cpu_var}") \
    ; $(pin_thread \${pid} "echo-service" "${!clustered_service_cpu_var}") \
    && tail --pid=\$! -f /dev/null"
}

commands=()
scenarios=()
scripts_path="benchmarks_path_var/scripts/aeron"

driver_properties="echo -e \"\
aeron.mtu.length=driver_mtu_var\n \
aeron.ipc.mtu.length=driver_mtu_var\n \
aeron.socket.so_sndbuf=${so_sndbuf}\n \
aeron.socket.so_rcvbuf=${so_rcvbuf}\n \
aeron.rcv.initial.window.length=${rcv_initial_window}\n \
aeron.network.publication.max.messages.per.send=${max_messages_per_send}\n \
\" > ${scripts_path}/benchmark.properties"

if [ "${enable_java_driver}" -eq 1 ]
then
  if [ "${no_java_driver}" -eq 0 ]
  then
    scenarios=("java")
    commands+=("${driver_properties}; \
      $(start_media_driver "${scripts_path}/media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" )")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("java-onload")
    commands+=("${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/media-driver" "${onload}" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi
fi

if [ "${enable_c_driver}" -eq 1 ]
then
  if [ "${no_c_driver}" -eq 0 ]
  then
    scenarios+=("c")
     commands+=("${driver_properties}; \
      $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("c-onload")
    commands+=("${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi

  if [ "${enable_ef_vi}" -eq 1 ]
  then
    scenarios+=("c-ef_vi")
    commands+=("${driver_properties}; \
      export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
      AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
      AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
      AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi

  if [ "${enable_dpdk}" -eq 1 ]
  then
    scenarios+=("c-dpdk")
    commands+=("${driver_properties}; \
      export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
      AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
      && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")

    for ((n = 0; n < CLUSTER_SIZE; n++))
    do
      node_var="NODE${n}_AERON_DPDK_GATEWAY_IPV4_ADDRESS"
      if [[ -z "${!node_var+''}" ]]; then
        echo "env var '${node_var}' must be set"
        exit 1
      fi

      node_var="NODE${n}_AERON_DPDK_LOCAL_IPV4_ADDRESS"
      if [[ -z "${!node_var+''}" ]]; then
        echo "env var '${node_var}' must be set"
        exit 1
      fi
    done

    if [[ -z "${CLIENT_AERON_DPDK_GATEWAY_IPV4_ADDRESS}" ]]; then
      echo "env var 'CLIENT_AERON_DPDK_GATEWAY_IPV4_ADDRESS' must be set"
      exit 1
    fi

    if [[ -z "${CLIENT_AERON_DPDK_LOCAL_IPV4_ADDRESS}" ]]; then
      echo "env var 'CLIENT_AERON_DPDK_LOCAL_IPV4_ADDRESS' must be set"
      exit 1
    fi
  fi

  if [ "${enable_ats}" -eq 1 ]
  then
    if [ "${no_c_driver}" -eq 0 ]
    then
      scenarios+=("c-ats")
      commands+=("${driver_properties}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
    fi

    if [ "${enable_onload}" -eq 1 ]
    then
      scenarios+=("c-ats-onload")
      commands+=("${driver_properties}; \
        export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
    fi

    if [ "${enable_ef_vi}" -eq 1 ]
    then
      scenarios+=("c-ats-ef_vi")
      commands+=("${driver_properties}; \
        export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\",\"${scripts_path}/libaeron_ef_vi.so\" \
        AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
    fi

    if [ "${enable_dpdk}" -eq 1 ]
    then
      scenarios+=("c-ats-dpdk")
      commands+=("${driver_properties}; \
        export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
        AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" )")
    fi
  fi
fi

for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"
  for fsync in "${file_sync_levels[@]}"
  do
    for mtu in "${mtu_list[@]}"
    do
      test="cluster_${scenario}_fsync-${fsync}_mtu-${mtu}_rcvwnd-${rcv_initial_window}"
      echo -e "\n Testing scenario: '${test}'\n"

      driver="${commands[index]//driver_mtu_var/${mtu}}"

      client_driver="${driver//benchmarks_path_var/${CLIENT_BENCHMARKS_PATH}}"
      client_driver="${client_driver//driver_other_cpu_cores_var/${CLIENT_DRIVER_OTHER_CPU_CORES}}"
      client_driver="${client_driver//driver_conductor_cpu_core_var/${CLIENT_DRIVER_CONDUCTOR_CPU_CORE}}"
      client_driver="${client_driver//driver_sender_cpu_core_var/${CLIENT_DRIVER_SENDER_CPU_CORE}}"
      client_driver="${client_driver//driver_receiver_cpu_core_var/${CLIENT_DRIVER_RECEIVER_CPU_CORE}}"
      client_driver="${client_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${CLIENT_AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
      client_driver="${client_driver//driver_aeron_dpdk_local_ipv4_address_var/${CLIENT_AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

      client_class_name="uk.co.real_logic.benchmarks.remote.LoadTestRig"
      cluster_node_class_name="uk.co.real_logic.benchmarks.aeron.remote.ClusterNode"
      client_ingress_endpoints=''
      if [ -n "${CLIENT_INGRESS_ENDPOINTS}" ]; then
        client_ingress_endpoints="-Daeron.cluster.ingress.endpoints=${CLIENT_INGRESS_ENDPOINTS}"
      fi

      for rateIndex in "${!messageRates[@]}"
      do
        messageRate=${messageRates[rateIndex]}
        messageLength=${messageLengths[rateIndex]}
        for burstSize in "${burstSizes[@]}"
        do
          for (( i=0; i<runs; i++ ))
          do
            echo -e '\n### Benchmark run #'"$((i + 1))"' ...\n'

            start_client="export JVM_OPTS=\"\
            -Daeron.mtu.length=${mtu} \
            -Duk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${connectionTimeout}\
            -Duk.co.real_logic.benchmarks.remote.warmup.iterations=${warmupIterations}\
            -Duk.co.real_logic.benchmarks.remote.warmup.message.rate=${warmupMessageRate}\
            -Duk.co.real_logic.benchmarks.remote.iterations=${iterations}\
            -Duk.co.real_logic.benchmarks.remote.message.rate=${messageRate# }\
            -Duk.co.real_logic.benchmarks.remote.batch.size=${burstSize# }\
            -Duk.co.real_logic.benchmarks.remote.message.length=${messageLength# }\
            -Duk.co.real_logic.benchmarks.remote.output.file=${test}\
            -Duk.co.real_logic.benchmarks.remote.output.directory=${CLIENT_BENCHMARKS_PATH}/scripts/results\
            -Daeron.cluster.ingress.channel=${CLIENT_INGRESS_CHANNEL}\
            ${client_ingress_endpoints}\
            -Daeron.cluster.egress.channel=${CLIENT_EGRESS_CHANNEL}\
            -Daeron.cluster.message.timeout=300000000000\"\
            && export JAVA_HOME=\"${CLIENT_JAVA_HOME}\"\
            ; $(kill_java_process "${client_class_name}")\
            ; ${client_driver}\
            && taskset -c ${CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES} ${CLIENT_BENCHMARKS_PATH}/scripts/aeron/cluster-client & \
            $(await_java_process_start "${client_class_name}")\
            ; $(pin_thread \${pid} "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}")\
            && tail --pid=\$! -f /dev/null; kill -9 \${driver_pid}; wait"

            for (( n=0; n<CLUSTER_SIZE; n++ ))
            do
              echo -e "\nStopping rouge node ${n} and cleanup data..."
              ssh_node=SSH_CLUSTER_NODE${n}
              archive_dir_var=NODE${n}_ARCHIVE_DIR
              cluster_dir_var=NODE${n}_CLUSTER_DIR
              execute_remote_command "${!ssh_node}" "$(kill_java_process "${cluster_node_class_name}"); $(stop_media_driver); rm -rf \"${!cluster_dir_var}\"; rm -rf \"${!archive_dir_var}\"; exit"
            done

            for (( n=0; n<CLUSTER_SIZE; n++ ))
            do
              echo -e "\nStarting node ${n}..."
              ssh_node=SSH_CLUSTER_NODE${n}
              server_benchmarks_path=NODE${n}_BENCHMARKS_PATH
              server_driver_other_cpu_cores=NODE${n}_DRIVER_OTHER_CPU_CORES
              server_driver_conductor_cpu_core=NODE${n}_DRIVER_CONDUCTOR_CPU_CORE
              server_driver_sender_cpu_core=NODE${n}_DRIVER_SENDER_CPU_CORE
              server_driver_receiver_cpu_core=NODE${n}_DRIVER_RECEIVER_CPU_CORE
              server_driver_aeron_dpdk_gateway_ipv4_address=NODE${n}_AERON_DPDK_GATEWAY_IPV4_ADDRESS
              server_driver_aeron_dpdk_local_ipv4_address=NODE${n}_AERON_DPDK_LOCAL_IPV4_ADDRESS
              server_driver="${driver//benchmarks_path_var/${!server_benchmarks_path}}"
              server_driver="${server_driver//driver_other_cpu_cores_var/${!server_driver_other_cpu_cores}}"
              server_driver="${server_driver//driver_conductor_cpu_core_var/${!server_driver_conductor_cpu_core}}"
              server_driver="${server_driver//driver_sender_cpu_core_var/${!server_driver_sender_cpu_core}}"
              server_driver="${server_driver//driver_receiver_cpu_core_var/${!server_driver_receiver_cpu_core}}"
              server_driver="${server_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${!server_driver_aeron_dpdk_gateway_ipv4_address}}"
              server_driver="${server_driver//driver_aeron_dpdk_local_ipv4_address_var/${!server_driver_aeron_dpdk_local_ipv4_address}}"
              execute_remote_command "${!ssh_node}" "($(start_server "${cluster_node_class_name}" "${server_driver}" "${fsync}" "${mtu}" "${n}") &) >  /tmp/benchmarks-cluster-node-${n}.log 2>&1 && exit"
            done

            echo -e "\nRunning benchmark..."
            execute_remote_command "${SSH_CLIENT_NODE}" "${start_client} && exit"

            for (( n=0; n<CLUSTER_SIZE; n++ ))
            do
              echo -e "\nStopping node ${n}..."
              ssh_node=SSH_CLUSTER_NODE${n}
              execute_remote_command "${!ssh_node}" "$(kill_java_process "${cluster_node_class_name}"); $(stop_media_driver); true && exit"
            done
          done
        done
      done
    done
  done
done

collect_environment_info "${CLIENT_BENCHMARKS_PATH}/scripts" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${CLIENT_JAVA_HOME}"

download_results "${results_file}" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${DIR}/.."
