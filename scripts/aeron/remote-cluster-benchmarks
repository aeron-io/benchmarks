#!/usr/bin/env bash
##
## Copyright 2015-2021 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

if [ -z "${MESSAGE_RATE}" ];
then
  MESSAGE_RATE=(50000)
fi

if [ -z "${MESSAGE_LENGTH}" ]
then
  export MESSAGE_LENGTH=(32 224 1344)
fi

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_JAVA_HOME"
  "CLIENT_DRIVER_NUMA_NODE"
  "CLIENT_LOAD_TEST_RIG_NUMA_NODE"
  "CLIENT_INGRESS_CHANNEL"
  "CLIENT_INGRESS_ENDPOINTS"
  "CLIENT_EGRESS_CHANNEL"
  "CLUSTER_MEMBERS"
  "CLUSTER_SIZE"
  "_JAVA_HOME"
  "_DRIVER_NUMA_NODE"
  "_NUMA_NODE"
  "_CLUSTER_DIR"
  "_CLUSTER_CONSENSUS_CHANNEL"
  "_CLUSTER_INGRESS_CHANNEL"
  "_CLUSTER_LOG_CHANNEL"
  "_CLUSTER_REPLICATION_CHANNEL"
  "_ARCHIVE_DIR"
  "_ARCHIVE_CONTROL_CHANNEL")

for var in "${required_vars[@]}"; do
  if [[ ${var} == _* ]]
  then
    for ((n = 0; n < CLUSTER_SIZE; n++))
    do
      node_var="NODE${n}${var}"
      if [[ -z "${!node_var+''}" ]]; then
        echo "env var '${node_var}' must be set"
        required_var_missing=true
      fi
    done
  else
    if [[ -z "${!var+''}" ]]
    then
      echo "env var '${var}' must be set"
      required_var_missing=true
    fi
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]]
then
  exit 1
fi

enable_java_driver=1
no_java_driver=0
enable_c_driver=1
no_c_driver=0
enable_onload=1
enable_ef_vi=1
enable_ats=1
file_sync_levels=(0 2)
results_file="aeron-cluster-results.zip"

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --disable-c-driver)
    enable_c_driver=0
    shift
    ;;
  --no-c-driver)
    no_c_driver=1
    shift
    ;;
  --disable-java-driver)
    enable_java_driver=0
    shift
    ;;
  --no-java-driver)
    no_java_driver=1
    shift
    ;;
  --no-onload)
    enable_onload=0
    shift
    ;;
  --no-ef_vi)
    enable_ef_vi=0
    shift
    ;;
  --no-ats)
    enable_ats=0
    shift
    ;;
  --file-sync-level)
    IFS=','
    read -ra file_sync_levels <<<"${2}"
    unset IFS
    shift
    shift
    ;;
  --results-file)
    results_file="${2}"
    shift
    shift
    ;;
  -h | --help)
    echo "${0} [--no-c-driver] [--no-java-driver] [--no-onload] [--no-ef_vi] [--no-ats] [--file-sync-level \"\${file-sync-level-csv}\"]"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

if [ "${enable_java_driver}" -ne 1 ] && [ "${enable_c_driver}" -ne 1 ]
then
  echo "At least C or Java driver must be enabled!"
  exit 1
fi

function start_server()
{
  local cluster_node_class_name=${1}
  local server_driver=${2}
  local fsync=${3}
  local node_id=${4}
  local benchmarks_path=NODE${node_id}_BENCHMARKS_PATH
  local java_home=NODE${node_id}_JAVA_HOME
  local cluster_dir=NODE${node_id}_CLUSTER_DIR
  local cluster_consensus_channel=NODE${node_id}_CLUSTER_CONSENSUS_CHANNEL
  local cluster_ingress_channel=NODE${node_id}_CLUSTER_INGRESS_CHANNEL
  local cluster_log_channel=NODE${node_id}_CLUSTER_LOG_CHANNEL
  local cluster_replication_channel=NODE${node_id}_CLUSTER_REPLICATION_CHANNEL
  local archive_dir=NODE${node_id}_ARCHIVE_DIR
  local archive_control_channel=NODE${node_id}_ARCHIVE_CONTROL_CHANNEL
  local numa_node=NODE${node_id}_NUMA_NODE
  echo "
    export JAVA_HOME=\"${!java_home}\" \
    ; $(kill_java_process "${cluster_node_class_name}") \
    ; rm -rf \"${cluster_dir}\" \
    ; rm -rf \"${archive_dir}\" \
    ; ${server_driver} \
    && export JVM_OPTS=\"\
    -Duk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${CONNECTION_TIMEOUT} \
    -Daeron.cluster.dir=${!cluster_dir} \
    -Daeron.cluster.idle.strategy=noop \
    -Daeron.cluster.members=${CLUSTER_MEMBERS} \
    -Daeron.cluster.member.id=${node_id} \
    -Daeron.cluster.consensus.channel=${!cluster_consensus_channel} \
    -Daeron.cluster.ingress.channel=${!cluster_ingress_channel} \
    -Daeron.cluster.log.channel=${!cluster_log_channel} \
    -Daeron.cluster.replication.channel=${!cluster_replication_channel} \
    -Daeron.archive.dir=${!archive_dir} \
    -Daeron.archive.control.channel=${!archive_control_channel} \
    -Daeron.archive.file.sync.level=${fsync} \
    -Daeron.archive.catalog.file.sync.level=${fsync} \
    -Daeron.archive.recording.events.enabled=false\" \
    && numactl -N ${!numa_node} -m ${!numa_node} ${!benchmarks_path}/scripts/aeron/cluster-node"
}

commands=()
scenarios=()
scripts_path="benchmarks_path_var/scripts/aeron"
onload="onload --profile=latency --force-profiles "
if [ "${enable_java_driver}" -eq 1 ]
then
  if [ "${no_java_driver}" -eq 0 ]
  then
    scenarios=("java")
    commands+=("$(start_media_driver "${scripts_path}/media-driver" "" "driver_numa_node_var")")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("java-onload")
    commands+=("$(start_media_driver "${scripts_path}/media-driver" "${onload}" "driver_numa_node_var")")
  fi
fi

if [ "${enable_c_driver}" -eq 1 ]
then
  create_benchmark_props="touch ${scripts_path}/benchmark.properties"
  if [ "${no_c_driver}" -eq 0 ]
  then
    scenarios+=("c")
    commands+=("${create_benchmark_props}; $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_numa_node_var")")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("c-onload")
    commands+=("${create_benchmark_props}; $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_numa_node_var")")
  fi

  if [ "${enable_ef_vi}" -eq 1 ]
  then
    scenarios+=("c-ef_vi")
    commands+=("${create_benchmark_props}; \
      export AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
      AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
      AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_numa_node_var")")
  fi

  if [ "${enable_ats}" -eq 1 ]
  then
    scenarios+=("c-ats")
    commands+=("${create_benchmark_props}; \
      export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
      AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
      AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
      AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
      AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_numa_node_var")")

    if [ "${enable_onload}" -eq 1 ]
    then
      scenarios+=("c-ats-onload")
      commands+=("${create_benchmark_props}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_numa_node_var")")
    fi

    if [ "${enable_ef_vi}" -eq 1 ]
    then
      scenarios+=("c-ats-ef_vi")
      commands+=("${create_benchmark_props}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\",\"${scripts_path}/libaeron_ef_vi.so\" \
        AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_numa_node_var")")
    fi
  fi
fi

for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"
  client_driver="${commands[index]//benchmarks_path_var/${CLIENT_BENCHMARKS_PATH}}"
  client_driver="${client_driver//driver_numa_node_var/${CLIENT_DRIVER_NUMA_NODE}}"

  for fsync in "${file_sync_levels[@]}"
  do
    test="cluster-${scenario}-fsync-${fsync}"
    echo -e "\n Testing scenario: '${test}'\n"

    client_class_name="uk.co.real_logic.benchmarks.remote.LoadTestRig"
    cluster_node_class_name="uk.co.real_logic.benchmarks.aeron.remote.ClusterNode"
    client_ingress_endpoints=''
    if [ -n "${CLIENT_INGRESS_ENDPOINTS}" ]; then
      client_ingress_endpoints="-Daeron.cluster.ingress.endpoints=${CLIENT_INGRESS_ENDPOINTS}"
    fi

    for messageRate in "${MESSAGE_RATE[@]}"
    do
      for burstSize in "${BURST_SIZE[@]}"
      do
        for messageLength in "${MESSAGE_LENGTH[@]}"
        do
          for ((r = 1; r <= RUNS; r++))
          do
            echo -e '\n### Benchmark run #'"${r}"' ...\n'

            start_client="export JVM_OPTS=\"\
            -Duk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${CONNECTION_TIMEOUT}\
            -Duk.co.real_logic.benchmarks.remote.iterations=${ITERATIONS}\
            -Duk.co.real_logic.benchmarks.remote.message.rate=${messageRate# }\
            -Duk.co.real_logic.benchmarks.remote.batch.size=${burstSize# }\
            -Duk.co.real_logic.benchmarks.remote.message.length=${messageLength# }\
            -Duk.co.real_logic.benchmarks.remote.output.file=${test}\
            -Duk.co.real_logic.benchmarks.remote.output.directory=${CLIENT_BENCHMARKS_PATH}/scripts/results\
            -Daeron.cluster.ingress.channel=${CLIENT_INGRESS_CHANNEL}\
            ${client_ingress_endpoints}\
            -Daeron.cluster.egress.channel=${CLIENT_EGRESS_CHANNEL}\
            -Daeron.cluster.message.timeout=300000000000\"\
            && export JAVA_HOME=\"${CLIENT_JAVA_HOME}\"\
            ; $(kill_java_process "${client_class_name}")\
            ; ${client_driver}\
            && numactl -N ${CLIENT_LOAD_TEST_RIG_NUMA_NODE} -m ${CLIENT_LOAD_TEST_RIG_NUMA_NODE} ${CLIENT_BENCHMARKS_PATH}/scripts/aeron/cluster-client \
            ; kill -9 \${driver_pid}; wait"

            for ((n = 0; n < CLUSTER_SIZE; n++))
            do
              echo -e "\nStarting node ${n}..."
              ssh_node=SSH_CLUSTER_NODE${n}
              server_benchmarks_path=NODE${n}_BENCHMARKS_PATH
              server_driver="${commands[index]//benchmarks_path_var/${!server_benchmarks_path}}"
              server_driver_numa_node=NODE${n}_DRIVER_NUMA_NODE
              server_driver="${server_driver//driver_numa_node_var/${!server_driver_numa_node}}"
              execute_remote_command "${!ssh_node}" "($(start_server "${cluster_node_class_name}" "${server_driver}" "${fsync}" "${n}") &) >  /tmp/benchmarks-cluster-node-${n}.log 2>&1 && exit"
            done

            echo -e "\nRunning benchmark..."
            execute_remote_command "${SSH_CLIENT_NODE}" "${start_client} && exit"

            for ((n = 0; n < CLUSTER_SIZE; n++))
            do
              echo -e "\nStopping node ${n}..."
              ssh_node=SSH_CLUSTER_NODE${n}
              execute_remote_command "${!ssh_node}" "$(kill_java_process "${cluster_node_class_name}"); $(stop_media_driver) && exit"
            done
          done
        done
      done
    done
  done
done

download_results "${results_file}" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${DIR}/.."
