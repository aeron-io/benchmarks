#!/usr/bin/env bash
##
## Copyright 2015-2023 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_JAVA_HOME"
  "CLIENT_DRIVER_CONDUCTOR_CPU_CORE"
  "CLIENT_DRIVER_SENDER_CPU_CORE"
  "CLIENT_DRIVER_RECEIVER_CPU_CORE"
  "CLIENT_DRIVER_OTHER_CPU_CORES"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES"
  "CLIENT_INTERFACE"
  "SERVER_JAVA_HOME"
  "SERVER_DRIVER_CONDUCTOR_CPU_CORE"
  "SERVER_DRIVER_SENDER_CPU_CORE"
  "SERVER_DRIVER_RECEIVER_CPU_CORE"
  "SERVER_DRIVER_OTHER_CPU_CORES"
  "SERVER_ARCHIVE_RECORDER_CPU_CORE"
  "SERVER_ARCHIVE_REPLAYER_CPU_CORE"
  "SERVER_ARCHIVE_CONDUCTOR_CPU_CORE"
  "SERVER_ARCHIVE_OTHER_CPU_CORES"
  "SERVER_INTERFACE"
  "DESTINATION_IP"
  "SOURCE_IP"
  "ARCHIVE_DIR")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]]
then
  exit 1
fi

ef_vi_rxq_size=${EF_VI_RXQ_SIZE:-1024} # ef_vi receive queue size
ef_vi_txq_size=${EF_VI_TXQ_SIZE:-2048} # ef_vi send queue size
so_sndbuf="${AERON_SOCKET_SO_SNDBUF:-2m}"
so_rcvbuf="${AERON_SOCKET_SO_RCVBUF:-2m}"
rcv_initial_window="${AERON_RCV_INITIAL_WINDOW_LENGTH:-2m}"
max_messages_per_send="${AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND:-2}"

enable_c_driver=1
no_c_driver=0
enable_java_driver=1
enable_ef_vi=1
enable_dpdk=1
file_sync_levels=(0 2)
mtu_list=(1408 8192)
results_file="aeron-live-replay-results"
onload="onload --profile=latency --force-profiles "

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --disable-c-driver)
    enable_c_driver=0
    shift
    ;;
  --no-c-driver)
    no_c_driver=1
    shift
    ;;
  --disable-java-driver)
    enable_java_driver=0
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --no-ef_vi)
    enable_ef_vi=0
    shift
    ;;
  --no-dpdk)
    enable_dpdk=0
    shift
    ;;
  --file-sync-level)
    IFS=',';
    read -ra file_sync_levels <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --results-file)
    results_file="${2}"
    shift
    shift
    ;;
  --mtu)
    IFS=','
    read -ra mtu_list <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  -h|--help)
    echo "${0} [--onload \"\$onload_command\"] [--no-ef_vi] [--no-dpdk] [--disable-c-driver] [--no-c-driver] [--disable-java-driver] [--file-sync-level \"\${file-sync-level-csv}\"] [--mtu \"\$mtu-csv\"]"
    exit
    ;;
  *)
    echo "Invalid parameter: ${1}. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

if [ "${enable_java_driver}" -ne 1 ] && [ "${enable_c_driver}" -ne 1 ]
then
  echo "At least C or Java driver must be enabled!"
  exit 1
fi

commands=()
scenarios=()
scripts_path="benchmarks_path_var/scripts/aeron"

driver_properties="echo -e \"\
aeron.mtu.length=driver_mtu_var\n \
aeron.ipc.mtu.length=driver_mtu_var\n \
aeron.socket.so_sndbuf=${so_sndbuf}\n \
aeron.socket.so_rcvbuf=${so_rcvbuf}\n \
aeron.rcv.initial.window.length=${rcv_initial_window}\n \
aeron.network.publication.max.messages.per.send=${max_messages_per_send}\n \
\" > ${scripts_path}/benchmark.properties"

if [ "${enable_java_driver}" -eq 1 ]
then
  if [ -n "${onload}" ]
  then
    scenarios+=("java-onload")
  else
    scenarios+=("java")
  fi
  commands+=("${driver_properties}; \
    export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
    && $(start_media_driver "${scripts_path}/media-driver" "${onload}" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
fi

if [ "${enable_c_driver}" -eq 1 ]
then
  if [ "${no_c_driver}" -eq 0 ]
  then
    if [ -n "${onload}" ]
    then
      scenarios+=("c-onload")
    else
      scenarios+=("c")
    fi
    commands+=("${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi

  if [ "${enable_ef_vi}" -eq 1 ]
  then
    scenarios+=("c-ef_vi")
    commands+=("${driver_properties}; \
      export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
      AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
      AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
      AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi

  if [ "${enable_dpdk}" -eq 1 ]
  then
    scenarios+=("c-dpdk")
    commands+=("${driver_properties}; \
      export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
      AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
      && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_other_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")")
  fi
fi

for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"

  for fsync in "${file_sync_levels[@]}"
  do
    for mtu in "${mtu_list[@]}"
    do
      test="live-replay_${scenario}_fsync-${fsync}_mtu-${mtu}_rcvwnd-${rcv_initial_window}"
      echo -e "\n Testing scenario: '${test}'\n"

      driver="${commands[index]//driver_mtu_var/${mtu}}"

      client_driver="${driver//benchmarks_path_var/${CLIENT_BENCHMARKS_PATH}}"
      client_driver="${client_driver//driver_other_cpu_cores_var/${CLIENT_DRIVER_OTHER_CPU_CORES}}"
      client_driver="${client_driver//driver_conductor_cpu_core_var/${CLIENT_DRIVER_CONDUCTOR_CPU_CORE}}"
      client_driver="${client_driver//driver_sender_cpu_core_var/${CLIENT_DRIVER_SENDER_CPU_CORE}}"
      client_driver="${client_driver//driver_receiver_cpu_core_var/${CLIENT_DRIVER_RECEIVER_CPU_CORE}}"
      client_driver="${client_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${CLIENT_AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
      client_driver="${client_driver//driver_aeron_dpdk_local_ipv4_address_var/${CLIENT_AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

      server_driver="${driver//benchmarks_path_var/${SERVER_BENCHMARKS_PATH}}"
      server_driver="${server_driver//driver_other_cpu_cores_var/${SERVER_DRIVER_OTHER_CPU_CORES}}"
      server_driver="${server_driver//driver_conductor_cpu_core_var/${SERVER_DRIVER_CONDUCTOR_CPU_CORE}}"
      server_driver="${server_driver//driver_sender_cpu_core_var/${SERVER_DRIVER_SENDER_CPU_CORE}}"
      server_driver="${server_driver//driver_receiver_cpu_core_var/${SERVER_DRIVER_RECEIVER_CPU_CORE}}"
      server_driver="${server_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${SERVER_AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
      server_driver="${server_driver//driver_aeron_dpdk_local_ipv4_address_var/${SERVER_AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

      client_class_name="uk.co.real_logic.benchmarks.remote.LoadTestRig"
      server_class_name="uk.co.real_logic.benchmarks.aeron.remote.ArchiveNode"

      server_interface=''
      if [[ -n "${SERVER_INTERFACE}" ]]
      then
        server_interface="|interface=${SERVER_INTERFACE}"
      fi

      client_interface=''
      if [[ -n "${CLIENT_INTERFACE}" ]]
      then
        client_interface="|interface=${CLIENT_INTERFACE}"
      fi

      start_client="\
      export JAVA_HOME=\"${CLIENT_JAVA_HOME}\" \
      ; $(kill_java_process "${client_class_name}") \
      ; ${client_driver} \
      && taskset -c ${CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES} ${CLIENT_BENCHMARKS_PATH}/scripts/aeron/live-replay-client & \
      $(await_java_process_start "${client_class_name}") \
      ; $(pin_thread \${pid} "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}") \
      && tail --pid=\$! -f /dev/null && kill -9 \${driver_pid}; wait"

      start_server="\
      export JAVA_HOME=\"${SERVER_JAVA_HOME}\" \
      ; $(kill_java_process "${server_class_name}") \
      ; ${server_driver} \
      && export JVM_OPTS=\"\
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.channel=aeron:udp?endpoint=${DESTINATION_IP}:13000${server_interface} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.channel=aeron:udp?endpoint=${SOURCE_IP}:13100${server_interface} \
      -Daeron.archive.control.channel=aeron:udp?endpoint=${DESTINATION_IP}:13200${server_interface} \
      -Daeron.archive.control.response.channel=aeron:udp?endpoint=${DESTINATION_IP}:0${server_interface} \
      -Daeron.archive.replication.channel=aeron:udp?endpoint=${DESTINATION_IP}:0${server_interface} \
      -Daeron.archive.dir=${ARCHIVE_DIR} \
      -Daeron.archive.file.sync.level=${fsync} \
      -Daeron.archive.catalog.file.sync.level=${fsync} \
      -Daeron.archive.recording.events.enabled=false\" \
      && taskset -c ${SERVER_ARCHIVE_OTHER_CPU_CORES} ${SERVER_BENCHMARKS_PATH}/scripts/aeron/live-replay-server & \
      $(await_java_process_start "${server_class_name}") \
      ; $(pin_thread \${pid} "archive-recorde" "${SERVER_ARCHIVE_RECORDER_CPU_CORE}") \
      ; $(pin_thread \${pid} "archive-replaye" "${SERVER_ARCHIVE_REPLAYER_CPU_CORE}") \
      ; $(pin_thread \${pid} "archive-conduct" "${SERVER_ARCHIVE_CONDUCTOR_CPU_CORE}") \
      && tail --pid=\$! -f /dev/null"

      stop_server="$(kill_java_process "${server_class_name}"); $(stop_media_driver)"

      run_benchmarks \
        "${start_client}" \
        "${start_server}" \
        "${stop_server}" \
        "uk.co.real_logic.benchmarks.remote.output.file=${test}" \
        "uk.co.real_logic.benchmarks.remote.output.directory=${CLIENT_BENCHMARKS_PATH}/scripts/results" \
        "uk.co.real_logic.benchmarks.aeron.remote.destination.channel=aeron:udp?endpoint=${DESTINATION_IP}:13000${client_interface}" \
        "uk.co.real_logic.benchmarks.aeron.remote.source.channel=aeron:udp?endpoint=${SOURCE_IP}:13100${client_interface}" \
        "aeron.archive.control.channel=aeron:udp?endpoint=${DESTINATION_IP}:13200${client_interface}" \
        "aeron.archive.control.response.channel=aeron:udp?endpoint=${SOURCE_IP}:0${client_interface}" \
        "aeron.archive.message.timeout=30000000000"
    done
  done
done

collect_environment_info "${CLIENT_BENCHMARKS_PATH}/scripts" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${CLIENT_JAVA_HOME}"

download_results "${results_file}" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${DIR}/.."
