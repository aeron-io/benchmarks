#!/usr/bin/env bash
##
## Copyright 2015-2023 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

required_vars=(
  "SSH_USER"
  "SSH_KEY_FILE"
  "SSH_CLIENT_NODE"
  "SSH_SERVER_NODE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]];
then
  exit 1
fi

sshConnectionAttempts=${SSH_CONNECTION_ATTEMPTS:-10}
sshConnectTimeout=${SSH_CONNECT_TIMEOUT:-30}
sshServerAliveInterval=${SSH_SERVER_ALIVE_INTERVAL:-600}
connectionTimeout="${CONNECTION_TIMEOUT:-60s}"

runs=${RUNS:-5}
iterations=${ITERATIONS:-10}
warmupIterations=${WARMUP_ITERATIONS:-10}
warmupMessageRate="${WARMUP_MESSAGE_RATE:-10K}"

messageRates=("1M" "500K" "100K")
if [[ -v MESSAGE_RATE && -n ${MESSAGE_RATE} ]];
then
  IFS=',';
  read -ra messageRates <<< "${MESSAGE_RATE}"
  unset IFS;
fi

messageLengths=(32 288 1344)
if [[ -v MESSAGE_LENGTH && -n ${MESSAGE_LENGTH} ]];
then
  IFS=',';
  read -ra messageLengths <<< "${MESSAGE_LENGTH}"
  unset IFS;
fi

if [[ "${#messageRates[@]}" != "${#messageLengths[@]}" ]];
then
  echo "MESSAGE_RATE and MESSAGE_LENGTH number of elements do not match: ${#messageRates[@]} vs ${#messageLengths[@]}"
  exit 1
fi

burstSizes=(1)
if [[ -v BURST_SIZE && -n ${BURST_SIZE} ]];
then
  IFS=',';
  read -ra burstSizes <<< "${BURST_SIZE}"
  unset IFS;
fi

function run_benchmarks()
{
  local client_command="${1}"
  local server_start_command="${2}"
  local server_stop_command="${3}"
  local config=("${@:4}")

  for rateIndex in "${!messageRates[@]}"
  do
    messageRate=${messageRates[rateIndex]}
    messageLength=${messageLengths[rateIndex]}
    for burstSize in "${burstSizes[@]}"
    do
      for (( i=0; i<runs; i++ ))
      do
        echo -e '\n### Benchmark run #'$((i + 1))' ...\n'

        local config_options=("${config[@]}")
        config_options+=("uk.co.real_logic.benchmarks.aeron.remote.connection.timeout=${connectionTimeout}")
        config_options+=("uk.co.real_logic.benchmarks.remote.warmup.iterations=${warmupIterations}")
        config_options+=("uk.co.real_logic.benchmarks.remote.warmup.message.rate=${warmupMessageRate}")
        config_options+=("uk.co.real_logic.benchmarks.remote.iterations=${iterations}")
        config_options+=("uk.co.real_logic.benchmarks.remote.message.rate=${messageRate# }")
        config_options+=("uk.co.real_logic.benchmarks.remote.batch.size=${burstSize# }")
        config_options+=("uk.co.real_logic.benchmarks.remote.message.length=${messageLength# }")

        local client_jvm_opts="export JVM_OPTS=\""
        for opt in "${config_options[@]}";
        do
          client_jvm_opts+="-D${opt} "
        done
        client_jvm_opts="${client_jvm_opts%?}\""

        echo -e "\nStarting server..."
        execute_remote_command "${SSH_SERVER_NODE}" "(${server_start_command} &) > /tmp/benchmarks-server.log 2>&1 && exit"

        echo -e "\nStarting client..."
        execute_remote_command "${SSH_CLIENT_NODE}" "${client_jvm_opts} && ${client_command} && exit"

        echo -e "\nStopping server..."
        execute_remote_command "${SSH_SERVER_NODE}" "${server_stop_command}; true && exit"
      done
    done
  done
}

function collect_environment_info()
{
  local collect_env_script = "collect-environment-info"
  local scripts_path = "${1}"
  local output_path = "${2}"
  local java_home = "${3}"

  execute_remote_command "${SSH_CLIENT_NODE}" "${scripts_path}/${collect_env_script} $output_path $java_home; true && exit"
}

function download_results()
{
  local archive="/home/${SSH_USER}/${1}.tar.gz"
  local results_dir="${2}"
  local dest_dir="${3}"

  execute_remote_command "${SSH_CLIENT_NODE}" "rm -f \"${archive}\"; cd \"${results_dir}\" && tar -czf \"${archive}\" . && exit"
  scp -i "${SSH_KEY_FILE}" \
   -o ConnectionAttempts="${sshConnectionAttempts}" \
   -o ConnectTimeout="${sshConnectTimeout}" \
   -o ServerAliveInterval="${sshServerAliveInterval}" \
   "${SSH_USER}"@"${SSH_CLIENT_NODE}":"${archive}" "${dest_dir}"
}

function await_process_start()
{
  local pid=${1}
  echo "pid=${pid}; while [ -z \"\${pid}\" ]; do sleep 0.5; pid=${pid}; done; echo \"pid=\${pid}\""
}

function find_java_process()
{
  local class_name=${1}
  echo "\$(pgrep -l -f '${class_name}' | awk '/java/{print \$1}')"
}

function await_java_process_start()
{
  local class_name=${1}
  await_process_start "$(find_java_process "${class_name}")"
}

function pin_thread()
{
  local pid=${1}
  local thread_name=${2}
  local core=${3}
  local tid="\$(ps Ho tid,comm -p ${pid} | awk '/${thread_name}/{print \$1}')"
  echo "tid=${tid}; while [ -z \"\${tid}\" ]; do sleep 0.1; tid=${tid}; done; echo \"tid_${thread_name}=\${tid}\"; taskset -p -c ${core} \${tid}"
}

function kill_java_process()
{
  local class_name=${1}
  echo "kill -9 $(find_java_process "${class_name}")"
}

function execute_remote_command()
{
  local server=$1
  local command=$2
  ssh -i "${SSH_KEY_FILE}" \
   -o ConnectionAttempts="${sshConnectionAttempts}" \
   -o ConnectTimeout="${sshConnectTimeout}" \
   -o ServerAliveInterval="${sshServerAliveInterval}" \
   "${SSH_USER}"@"${server}" \
   "${command}"
}
